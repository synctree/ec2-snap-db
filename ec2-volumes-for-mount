#!/bin/bash
#set -x
set -o pipefail

DIR=$(dirname $(readlink -f "$0"))

die() { echo "$@" 1>&2; exit 1; }

if [ $# -eq 0 ]; then
  die 'Usage: ec2-volumes-for-mount MOUNT [MOUNT...]'
fi

check_aws_key() {
  local FOUND_KEY= FOUND_VALUE=
  for KEY in "$@"; do
    if [ -z $FOUND_KEY ]; then
      if [ -n "${!KEY}" ]; then
        FOUND_KEY=$KEY
        FOUND_VALUE="${!KEY}"
      fi
    fi
    if [ -n "${!KEY}" -a "${!KEY}" != "$FOUND_VALUE" ]; then
      die "Both $FOUND_KEY and $KEY are set, but they have different values"
    fi
  done
  if [ -n "$FOUND_KEY" ]; then
    for KEY in "$@"; do
      if [ -z "${!KEY}" ]; then
        readonly "$KEY=$FOUND_VALUE"
      fi
    done
  else
    die "Missing key: $@"
  fi
}

check_aws_key AWS_ACCESS_KEY_ID AWS_ACCESS_KEY
check_aws_key AWS_SECRET_ACCESS_KEY AWS_SECRET_KEY

real_device() {
  local DEVICE="$1"
  test -L $DEVICE && DEVICE=`readlink -f $DEVICE`
  if [ ! -b $DEVICE ]; then
    die "Not a device: $DEVICE"
  fi
  echo $DEVICE
}

sysfs_components() {
  local DEVICE="$1"
  if [ ! -b $DEVICE ]; then
    die "Not a device: $DEVICE"
  fi
  local SYSFS_SLAVES_DIR=$(stat -c '0x%t 0x%T' $DEVICE | xargs printf '/sys/dev/block/%d:%d/slaves')
  [ -d $SYSFS_SLAVES_DIR ] || die "Missing sysfs directory '$SYSFS_SLAVES_DIR' for device '$DEVICE'"
  ls $SYSFS_SLAVES_DIR | sed -e 's#^#/dev/#'
}

declare -a DEVICES=()
for MOUNT in "$@"; do
  DEVICE=`awk -v mount=$MOUNT '$1 ~ /^\/dev\// && $2 == mount { print $1 }' /etc/mtab`
  if [ -z $DEVICE ]; then
    die "The path '$MOUNT' is not a mount point"
  fi
  DEVICE=`real_device $DEVICE`
  read DEVICE_MAJOR DEVICE_MINOR < <(stat -c '0x%t 0x%T' $DEVICE | xargs printf '%d %d\n')
  case $DEVICE_MAJOR in
    202) # Xen Virtual Block Device
      DEVICES+=("${DEVICE/xvd/sd}:$MOUNT:xvd")
      ;;
    9|252|253) # RAID, LVM
      SLAVE_DEVICES=`sysfs_components $DEVICE`
      if [ $? -ne 0 ]; then
        exit 1
      fi
      case $DEVICE_MAJOR in
        9)
          DEVICE_TYPE=raid
          ;;
        252|253)
          DEVICE_TYPE=lvm
          ;;
        *)
          die "Unknown device type $DEVICE_MAJOR:$DEVICE_MINOR for $DEVICE at $MOUNT"
          ;;
      esac
      for DEVICE in $SLAVE_DEVICES; do
        DEVICE=`real_device $DEVICE`
        DEVICES+=("${DEVICE/xvd/sd}:$MOUNT:$DEVICE_TYPE")
        N=$((N+1))
      done
      ;;
    *)
      die "Unknown device type $DEVICE_MAJOR:$DEVICE_MINOR for $DEVICE at $MOUNT"
      ;;
  esac
done

. $DIR/ec2-instance-env --export

join -j1 -a1 -t: \
  <(printf -- '%s\n' "${DEVICES[@]}" | sort -t: -k1,1) \
  <(ec2-describe-volumes --region $EC2_REGION \
      --filter "attachment.instance-id=$EC2_INSTANCE_ID" \
      --filter "attachment.status=attached" \
      --aws-access-key "$AWS_ACCESS_KEY_ID" \
      --aws-secret-key "$AWS_SECRET_ACCESS_KEY" | \
    awk '$1 == "ATTACHMENT" { print $4 ":" $2 }' | sort -t: -k1,1) | \
awk -F: -v OFS=: '{ print $2, $4, $1, $3 }'
