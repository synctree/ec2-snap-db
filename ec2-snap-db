#!/bin/bash
[ -n "$EC2_SNAP_DB_DEBUG" ] && set -x

DIR=$(dirname $(readlink -f "$BASH_SOURCE"))
SUDO=$([ $EUID -ne 0 ] && echo sudo)
CONFIG=${EC2_SNAP_DB_CONFIG:-/etc/default/ec2-snap-db}
VERBOSE=0

verbose() { [ $VERBOSE -gt 0 ] && echo "$@"; }
die() { echo "$@" 1>&2; exit 1; }

set -- $(getopt -o c:v --long config:,verbose -- "$@")
while [ $# -gt 0 ]; do
  case "$1" in
    -c|--config):
      eval "CONFIG=$2"; shift
      ;;
    -v|--verbose):
      VERBOSE=$((VERBOSE+1))
      ;;
    --)
      shift; break
      ;;
    -*)
      die "Unknown option $1"
      ;;
    *)
      break
      ;;
  esac
  shift
done

SNAP_DB_MOUNTS=()
SNAP_DB_OPTIONS=()
if [ -r "$CONFIG" ]; then
  verbose "Sourcing config: $CONFIG"
  . "$CONFIG"
fi

export AWS_ACCESS_KEY_ID
export AWS_SECRET_ACCESS_KEY

check_aws_key() {
  local FOUND_KEY= FOUND_VALUE=
  for KEY in "$@"; do
    if [ -z $FOUND_KEY ]; then
      if [ -n "${!KEY}" ]; then
        FOUND_KEY=$KEY
        FOUND_VALUE="${!KEY}"
      fi
    fi
    if [ -n "${!KEY}" -a "${!KEY}" != "$FOUND_VALUE" ]; then
      die "Both $FOUND_KEY and $KEY are set, but they have different values"
    fi
  done
  if [ -n "$FOUND_KEY" ]; then
    for KEY in "$@"; do
      if [ -z "${!KEY}" ]; then
        readonly "$KEY=$FOUND_VALUE"
      fi
    done
  else
    die "Missing key: $@"
  fi
}

check_aws_key AWS_ACCESS_KEY_ID AWS_ACCESS_KEY
check_aws_key AWS_SECRET_ACCESS_KEY AWS_SECRET_KEY

SNAP_DB_MOUNTS+=("$@")
if [ ${#SNAP_DB_MOUNTS[@]} -eq 0 ]; then
  echo "Error: no mounts to snapshot" 2>&1
  die "Usage: $0 [-v|--verbose] [-c|--config CONFIG] MOUNT [MOUNT...] (or configure SNAP_DB_MOUNTS in $CONFIG)"
fi

. "$DIR/ec2-instance-env" --export

VOLUME_MAP=$("$DIR/ec2-volumes-for-mount" "${SNAP_DB_MOUNTS[@]}")
if [ $? -ne 0 ]; then
  die "Could not determine volumes for mounts: ${SNAP_DB_MOUNTS[@]}"
fi

EC2_INSTANCE_NAME=$(ec2-describe-tags --region "$EC2_REGION" --filter "resource-id=$EC2_INSTANCE_ID" "key=Name" --aws-access-key "$AWS_ACCESS_KEY_ID" --aws-secret-key "$AWS_SECRET_ACCESS_KEY" | cut -f5-)
: ${EC2_INSTANCE_NAME:=$EC2_INSTANCE_ID}
: ${SNAP_DB_PREFIX:=$EC2_INSTANCE_NAME}
SNAP_DB_PREFIX=$(printf "$SNAP_DB_PREFIX" "$EC2_INSTANCE_NAME")
TS=$(date "+%Y%m%d%H%M%S")

ARGS=()
ARGS+=('--aws-access-key-id' "$AWS_ACCESS_KEY_ID")
ARGS+=('--aws-secret-access-key' "$AWS_SECRET_ACCESS_KEY")
ARGS+=('--region' "$EC2_REGION")
ARGS+=("${SNAP_DB_OPTIONS[@]}")

for MOUNT in $(awk -F: '{ print $1 }' <<< $"$VOLUME_MAP" | uniq); do
  ARGS+=('--freeze' "$MOUNT")
done
IFS=$'\n'
for line in $VOLUME_MAP; do
  IFS=: read MOUNT VOLUME DEVICE TYPE <<< "$line"
  [ "$MOUNT" = '/' ] && MOUNT='/[root]'
  if [ "$TYPE" = "xvd" ]; then
    DEVICE=
  else
    DEVICE=${DEVICE#/dev}
  fi
  DESCRIPTION="$SNAP_DB_PREFIX$MOUNT$DEVICE/$TS"
  ARGS+=('--description' "$DESCRIPTION" "$VOLUME")
done

[ $VERBOSE -gt 0 ] && set -x
$SUDO ec2-consistent-snapshot "${ARGS[@]}"
